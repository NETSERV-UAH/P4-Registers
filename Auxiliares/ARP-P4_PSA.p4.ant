/* -*- P4_16 -*- */
#include <core.p4>
#include <psa.p4>

const bit<16> TYPE_IPV4 = 0x800;
const bit<16> TYPE_ARP = 0x806;
const bit<32> NUM_ELEM_TABLE = 65536;
const bit<4> NUM_PORT = 3;

/*************************************************************************
*********************** H E A D E R S  ***********************************
*************************************************************************/

typedef bit<9>      egressSpec_t;
typedef bit<48>     EthernetAddress;
typedef bit<32>     ip4Addr_t;
typedef bit<48>     time_t;

header ethernet_t {
    EthernetAddress dstAddr;
    EthernetAddress srcAddr;
    bit<16>         etherType;
}

header arp_t {
	bit<16> hwType;
    bit<16> protoType;
	bit<8> hwAddrLen;
    bit<8> protoAddrLen;
    bit<16> opcode;
    EthernetAddress hwSrcAddr;
    ip4Addr_t protoSrcAddr;
    EthernetAddress hwDstAddr;
    ip4Addr_t protoDstAddr;
}

header ipv4_t {
    bit<4>  version;
    bit<4>  ihl;
    bit<8>  diffserv;
    bit<16> totalLen;
    bit<16> identification;
    bit<3>  flags;
    bit<13> fragOffset;
    bit<8>  ttl;
    bit<8>  protocol;
    bit<16> hdrChecksum;
    ip4Addr_t srcAddr;
    ip4Addr_t dstAddr;
}

struct fwd_metadata_t {
    bit<32> outport;
}

struct empty_metadata_t {}

header recirc_metadata_t {
    bit<8> custom_field;
}

struct metadata {
    fwd_metadata_t fwd_metadata;
    bit<3> custom_clone_id;
    recirc_metadata_t recirc_header;
}

struct headers {
    ethernet_t       ethernet;
    ipv4_t           ipv4;
    arp_t 	         arp;
}

/*************************************************************************
*********************** R E G I S T E R **********************************
*************************************************************************/
Register <PortId_t, EthernetAddress> (NUM_ELEM_TABLE) bcast_register_port; //BT Port
Register <Timestamp_t, EthernetAddress> (NUM_ELEM_TABLE) bcast_register_time; //BT time
Register <PortId_t, EthernetAddress> (NUM_ELEM_TABLE) ucast_register_port; //LT
Register <Timestamp_t, EthernetAddress> (NUM_ELEM_TABLE) ucast_register_time; //BT time


/*************************************************************************
*********************** P A R S E R  ***********************************
*************************************************************************/

parser CommonParser(packet_in buffer,
                    out headers parsed_hdr,
                    inout metadata user_meta)
{
    state start {
        transition parse_ethernet;
    }
    state parse_ethernet {
        buffer.extract(parsed_hdr.ethernet);
        transition select(parsed_hdr.ethernet.etherType) {
            0x0800: parse_ipv4;
            default: accept;
        }
    }
    state parse_ipv4 {
        buffer.extract(parsed_hdr.ipv4);
        transition accept;
    }
}

parser IngressParserImpl(
    packet_in buffer,
    out headers parsed_hdr,
    inout metadata user_meta,
    in psa_ingress_parser_input_metadata_t istd,
    in empty_metadata_t resub_meta,
    in recirc_metadata_t recirc_meta)
{
    CommonParser() p;

    state start {
        transition select(istd.packet_path) {
           PSA_PacketPath_t.RECIRCULATE: copy_recirc_meta;
           PSA_PacketPath_t.NORMAL: parse_ethernet;
        }
    }

    state copy_recirc_meta {
        user_meta.recirc_header = recirc_meta;
	transition parse_ethernet;
    }

    state parse_ethernet {
        p.apply(buffer, parsed_hdr, user_meta);
	transition accept;
    }
}

parser EgressParserImpl(
    packet_in buffer,
    out headers parsed_hdr,
    inout metadata user_meta,
    in psa_egress_parser_input_metadata_t istd,
    in empty_metadata_t normal_meta,
    in empty_metadata_t clone_i2e_meta,
    in empty_metadata_t cloen_e2e_meta)
{
    CommonParser() p;

    state start {
        p.apply(buffer, parsed_hdr, user_meta);
        transition accept;
    }
}


/*************************************************************************
**************  I N G R E S S   P R O C E S S I N G   *******************
*************************************************************************/

control ingress(inout headers hdr,
                inout metadata user_meta,
                in  psa_ingress_input_metadata_t  istd,
                inout psa_ingress_output_metadata_t ostd)
{
    action forward(){
        return;
    }

    table broadcast {
        actions = {
            forward;
        }
    }


    /* ARP-PATH protocol logic*/
    apply {
        /* aux variables */
        PortId_t table_port = (PortId_t) 0;
        Timestamp_t timestamp = (Timestamp_t) 0;
        /*varibale for hash*/
        bit<32> hash_srcmac;
        bit<32> hash_dstmac;

        /*read ports in table */
        hash_srcmac = Hash((bit<32>) 0, { hdr.ethernet.srcAddr }, (bit<32>) NUM_ELEM_TABLE);
        hash_dstmac = Hash((bit<32>) 0, { hdr.ethernet.dstAddr }, (bit<32>) NUM_ELEM_TABLE);

        if (hdr.arp.isValid()){
            /* Start with request */
            if (hdr.arp.opcode == 2){
                /*Operation on BT*/
                /* look for the port dst */
                bcast_register_port.read(table_port, hash_dstmac);
                /* update the port dst */
                bcast_register_time.write(hash_dstmac, istd.ingress_timestamp);
                /*Operation on LT*/
                /* create/udapte DST*/
                ucast_register_port.write(hash_dstmac, table_port);
                ucast_register_time.write(hash_dstmac, istd.ingress_timestamp);
                /* create/udapte SRC*/
                ucast_register_port.write(hash_srcmac, istd.ingress_port);
                ucast_register_time.write(hash_srcmac, istd.ingress_timestamp);
            }
        }
        //forwarding part
        if (hdr.ethernet.srcAddr[1:0] != 0){
            bcast_register_port.read(table_port, hash_srcmac);
            bcast_register_time.read(timestamp, hash_srcmac);
            /* if not exist port in table */
            if (table_port == (PortId_t)0 || table_port == istd.ingress_port){
                bcast_register_port.write(hash_srcmac, istd.ingress_port);
                bcast_register_time.write(hash_srcmac, istd.ingress_timestamp);
                //send_to_multicast_group(standard_metadata.mcast_grp);
                /* Send broadcast packet */
                multicast(istd,1);
            }
            else{
                /* drop packet */
                ingress_drop(ostd);
            }
        }
        else{
            /* Send the packet if we have out port */
            if (table_port != (PortId_t)0){
                send_to_port(ostd, table_port);
            }
            else{
                /* Drop the packet because we haven't out port */
                ingress_drop(ostd);
            }
        }

    }
}

/*************************************************************************
**************  E G R E S S   P R O C E S S I N G   **********************
*************************************************************************/

control egress(inout headers hdr,
               inout metadata user_meta,
               in  psa_egress_input_metadata_t  istd,
               inout psa_egress_output_metadata_t ostd)
{
    apply {
    }
}

/*************************************************************************
***********************  D E P A R S E R  *******************************
*************************************************************************/


control DeparserImpl(packet_out packet, inout headers hdr) {
    apply {
        packet.emit(hdr.ethernet);
        packet.emit(hdr.arp);
        packet.emit(hdr.ipv4);
    }
}

control IngressDeparserImpl( packet_out packet, out empty_metadata_t clone_i2e_meta,out empty_metadata_t resub_meta,
    out empty_metadata_t normal_meta, inout headers hdr, in metadata meta, in psa_ingress_output_metadata_t istd)
{
    DeparserImpl() common_deparser;
    apply {
        common_deparser.apply(packet, hdr);
    }
}

control EgressDeparserImpl( packet_out packet, out empty_metadata_t clone_e2e_meta, out recirc_metadata_t recirc_meta,
    inout headers hdr, in metadata meta, in psa_egress_output_metadata_t istd, in psa_egress_deparser_input_metadata_t edstd)
{
    DeparserImpl() common_deparser;
    apply {
        if (psa_recirculate(istd, edstd)) {
            recirc_meta.custom_field = 1;
        }
        common_deparser.apply(packet, hdr);
    }
}

/*************************************************************************
***********************  S W I T C H  *******************************
*************************************************************************/


IngressPipeline(IngressParserImpl(),
                ingress(),
                IngressDeparserImpl()) igress_process;

EgressPipeline(EgressParserImpl(),
               egress(),
               EgressDeparserImpl()) egress_process;

PSA_Switch(igress_process, PacketReplicationEngine(), egress_process, BufferingQueueingEngine()) main;